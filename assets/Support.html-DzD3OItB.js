import{_ as s,b as l,c as a,d as r,e,g as n,f as t,h as o}from"./app-Db2qsd6l.js";const d={},u=e("h1",{id:"support-request",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#support-request"},[e("span",null,"Support Request")])],-1),c=e("p",null,"In case you need support or you found a bug it's all about informations that you need to deliver.",-1),f=e("h2",{id:"usual-request",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#usual-request"},[e("span",null,"Usual request")])],-1),p={href:"https://pastebin.com",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/hyperion-project/hyperion.ng/issues/new/choose",target:"_blank",rel:"noopener noreferrer"},h=e("h2",{id:"segmentation-faults",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#segmentation-faults"},[e("span",null,"Segmentation faults")])],-1),m=e("p",null,"Debugging segmentation faults requires a bunch of work, if we don't own your hardware (idr one of these plenty ARM systems) or can't reconstruct the segmentation fault we need a backtrace log from you. In order to create one, follow these steps.",-1),v=e("ul",null,[e("li",null,'You need a "Debug" version of Hyperion, download and install it over your existing installation.'),e("li",null,[n('Install "GDB", gbd is a tool which is often used for debugging. Get it from the software repository of your distribution (Debian e.g. '),e("code",null,"sudo apt-get install gdb")])],-1),g=e("h3",{id:"steps-of-execution",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#steps-of-execution"},[e("span",null,"Steps of execution")])],-1),x=o("<li>Open a terminal</li><li>Make sure Hyperion is NOT running, this can be done by typing <code>sudo service hyperiond stop</code> into the terminal and press enter</li><li>Type in <code>gdb</code> and press enter. You will now see the gdb welcome information and a &quot;(gdb)&quot; in front of your cursor</li><li>Tell gdb where &quot;hyperiond&quot; is located, usually at /usr/share/hyperion/bin/hyperiond. Prepend &quot;file&quot; to the path. So type into terminal something like that and press enter: <code>file /usr/share/hyperion/bin/hyperiond</code></li><li>gdb should tell you now that the binary has been loaded with it&#39;s symbols etc</li><li>Now type in <code>run</code> and press enter, this will start Hyperion. Now you can use Hyperion as usual, repeat the steps you did to create a segmentation fault.</li><li>A segmentation fault happened, when Hyperion stops responding and you see something like this as last message at the terminal: <code>Thread 1 &quot;hyperiond&quot; received signal SIGSEGV, Segmentation fault.</code></li>",7),_=e("code",null,"backtrace",-1),y={href:"https://hyperion-project.org",target:"_blank",rel:"noopener noreferrer"},Q=e("li",null,[n("To quit gdb press enter and type in "),e("code",null,"quit"),n(", you can start Hyperion again with "),e("code",null,"sudo service hyperiond start"),n(`. It's not recommended to use "Debug" Hyperion builds in production, just install the "Release" version again.`)],-1),k=o(`<h3 id="example-backtrace-log" tabindex="-1"><a class="header-anchor" href="#example-backtrace-log"><span>Example backtrace log</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>  (gdb) backtrace
  #0  0x0000000000000000 in ?? ()
  #1  0x00000000006173f2 in LinearColorSmoothing::queueColors (this=0xfdfa70, 
      ledColors=std::vector of length 34, capacity 34 = {...})
      at /home/hyperion/Dokumente/hyperion.ngBeta/libsrc/hyperion/LinearColorSmoothing.cpp:153
  #2  0x0000000000617374 in LinearColorSmoothing::updateLeds (this=0xfdfa70)
      at /home/hyperion/Dokumente/hyperion.ngBeta/libsrc/hyperion/LinearColorSmoothing.cpp:143
  #3  0x0000000000609652 in LinearColorSmoothing::qt_static_metacall (
      _o=0xfdfa70, _c=QMetaObject::InvokeMetaMethod, _id=1, _a=0x7fffffffd190)
      at /home/hyperion/Dokumente/hyperion.ngBeta/build/libsrc/hyperion/moc_LinearColorSmoothing.cpp:85
  #4  0x00007ffff59abd2a in QMetaObject::activate(QObject*, int, int, void**) ()
     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  #5  0x00007ffff59b85c8 in QTimer::timerEvent(QTimerEvent*) ()
     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  #6  0x00007ffff59acbb3 in QObject::event(QEvent*) ()
     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  #7  0x00007ffff78a505c in QApplicationPrivate::notify_helper(QObject*, QEvent*)
     () from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
  #8  0x00007ffff78aa516 in QApplication::notify(QObject*, QEvent*) ()
     from /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5
  #9  0x00007ffff597d38b in QCoreApplication::notifyInternal(QObject*, QEvent*)
  ---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---
      () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  #10 0x00007ffff59d25ed in QTimerInfoList::activateTimers() ()
     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  #11 0x00007ffff59d2af1 in ?? () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  #12 0x00007ffff4572127 in g_main_context_dispatch ()
     from /lib/x86_64-linux-gnu/libglib-2.0.so.0
  #13 0x00007ffff4572380 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0
  #14 0x00007ffff457242c in g_main_context_iteration ()
     from /lib/x86_64-linux-gnu/libglib-2.0.so.0
  #15 0x00007ffff59d37cf in QEventDispatcherGlib::processEvents(QFlags&lt;QEventLoop::ProcessEventsFlag&gt;) () from /usr/lib/x86_64-linux-
  gnu/libQt5Core.so.5
  #16 0x00007ffff597ab4a in QEventLoop::exec(QFlags&lt;QEventLoop::ProcessEventsFlag&gt;) () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  #17 0x00007ffff5982bec in QCoreApplication::exec() ()
     from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
  #18 0x00000000005d9279 in main (argc=1, argv=0x7fffffffde08)
      at /home/hyperion/Dokumente/hyperion.ngBeta/src/hyperiond/main.cpp:337
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function q(S,w){const i=l("ExternalLinkIcon");return a(),r("div",null,[u,c,f,e("p",null,[n("To provide a log, please go to System -> Log in the WebUI and copy the log. Then create a paste at "),e("a",p,[n("Pastebin.com"),t(i)]),n(" with the copied log. Once you have the Pastebin link, please open a issue on "),e("a",b,[n("Github"),t(i)]),n(", fill out the template and provide the Pastebin link.")]),h,m,v,g,e("ul",null,[x,e("li",null,[n("Now type in "),_,n(" and press enter, add the backtrace to your support request thread at our forum. "),e("a",y,[n("Hyperion Project Forum"),t(i)])]),Q]),k])}const E=s(d,[["render",q],["__file","Support.html.vue"]]),L=JSON.parse('{"path":"/user/advanced/Support.html","title":"Support Request","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Usual request","slug":"usual-request","link":"#usual-request","children":[]},{"level":2,"title":"Segmentation faults","slug":"segmentation-faults","link":"#segmentation-faults","children":[{"level":3,"title":"Steps of execution","slug":"steps-of-execution","link":"#steps-of-execution","children":[]},{"level":3,"title":"Example backtrace log","slug":"example-backtrace-log","link":"#example-backtrace-log","children":[]}]}],"git":{"updatedTime":1710685240000},"filePathRelative":"user/advanced/Support.md"}');export{E as comp,L as data};

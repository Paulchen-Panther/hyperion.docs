import{_ as n,b as o,c as r,d,e as t,g as e,f as i,h as a}from"./app-4Z5CXxNJ.js";const s={},h=t("h1",{id:"effect-engine-api",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#effect-engine-api"},[t("span",null,"Effect Engine API")])],-1),g=t("p",null,"All available functions for usage.",-1),c=t("h2",{id:"api-overview",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#api-overview"},[t("span",null,"API Overview")])],-1),y=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Function"),t("th",null,"Returns"),t("th",{style:{"text-align":"left"}},"Comment")])],-1),f=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.ledCount"),t("td",null,"Integer"),t("td",{style:{"text-align":"left"}},"Get the current LED count from the LED layout")],-1),p=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.latchTime"),t("td",null,"Integer"),t("td",{style:{"text-align":"left"}},"Get the current active latchtime in ms.")],-1),x=t("td",{style:{"text-align":"left"}},"hyperion.imageWidth()",-1),m=t("td",null,"Integer",-1),u={style:{"text-align":"left"}},_={href:"https://doc.qt.io/qt-5/coordsys.html#rendering",target:"_blank",rel:"noopener noreferrer"},b=t("td",{style:{"text-align":"left"}},"hyperion.imageHeight()",-1),w=t("td",null,"Integer",-1),v={style:{"text-align":"left"}},I={href:"https://doc.qt.io/qt-5/coordsys.html#rendering",target:"_blank",rel:"noopener noreferrer"},D=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageCRotate()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("Rotates the coordinate system at the center (0,0) by the given angle. See "),t("a",{href:"#hyperion-imagecrotate"},"hyperion.imageCRotate()")])],-1),A=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageCOffset()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("Add a offset to the coordinate system. See "),t("a",{href:"#hyperion-imagecoffset"},"hyperion.imageCOffset()")])],-1),S=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageCShear()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("Shear the coordinate system. See "),t("a",{href:"#hyperion-imagecshear"},"hyperion.imageCShear()")])],-1),R=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageResetT()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},"Resets all coordination system modifications done with hyperion.imageCRotate(), hyperion.imageCOffset(), hyperion.imageCShear()")],-1),C=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageMinSize()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imageminsize"},"hyperion.imageMinSize()")])],-1),Y=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.abort()"),t("td",null,"Boolean"),t("td",{style:{"text-align":"left"}},"If true, hyperion requests an effect abort, used in a while loop to repeat effect calculations and writing")],-1),X=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageConicalGradient()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imageconicalgradient"},"hyperion.imageConicalGradient()")])],-1),P=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageRadialGradient()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imageradialgradient"},"hyperion.imageRadialGradient()")])],-1),k=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageLinearGradient()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imagelineargradient"},"hyperion.imageLinearGradient()")])],-1),T=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageDrawLine()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imagedrawline"},"hyperion.imageDrawLine()")])],-1),G=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageDrawPoint()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imagedrawpoint"},"hyperion.imageDrawPoint()")])],-1),q=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageDrawPolygon()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imagedrawpolygon"},"hyperion.imageDrawPolygon()")])],-1),E=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageDrawPie()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imagedrawpie"},"hyperion.imageDrawPie()")])],-1),L=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageDrawRect()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imagedrawrect"},"hyperion.imageDrawRect()")])],-1),H=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageSolidFill()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imagesolidfill"},"hyperion.imageSolidFill()")])],-1),O=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageShow()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("Hyperion shows the image you created with other "),t("code",null,"hyperion.image*"),e(" functions before. This is always the last step after you created the image with other hyperion.image* function")])],-1),B=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageSetPixel()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("See "),t("a",{href:"#hyperion-imagesetpixel"},"hyperion.imageSetPixel()")])],-1),W=t("td",{style:{"text-align":"left"}},"hyperion.imageGetPixel()",-1),F=t("td",null,"Tuple",-1),z={style:{"text-align":"left"}},N={href:"https://www.tutorialspoint.com/python/python_tuples.htm",target:"_blank",rel:"noopener noreferrer"},M=t("a",{href:"#hyperion-imagegetpixel"},"hyperion.imageGetPixel()",-1),V=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.imageSave()"),t("td",null,"Integer"),t("td",{style:{"text-align":"left"}},[e("Create a snapshot of the current effect image and returns an ID. To display the snapshot do "),t("code",null,"hyperion.imageShow(ID)"),e(". Snapshots are the "),t("em",null,"current"),e(" state of the picture")])],-1),Q=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.setColor()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},[e("Not recommended, read why! See "),t("a",{href:"#hyperion-setcolor"},"hyperion.setColor()")])],-1),U=t("tr",null,[t("td",{style:{"text-align":"left"}},"hyperion.setImage()"),t("td",null,"-"),t("td",{style:{"text-align":"left"}},"hyperion.setImage(width, height, RGB_bytearray)")],-1),J=a('<h3 id="hyperion-imageminsize" tabindex="-1"><a class="header-anchor" href="#hyperion-imageminsize"><span>hyperion.imageMinSize()</span></a></h3><p>As the <code>hyperion.imageWidth()</code> and <code>hyperion.imageHeight()</code> scales with the LED layout, you could define a minimum size to get more pixels to work with. Keep in mind that the ratio between width/height depends always on user LED setup, you can&#39;t force it.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Should be called before you start painting!</p></div><p><code>hyperion.imageMinSize(pixelX,pixelY)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">pixelX</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Minimum Pixels at the x-axis of the image to draw on with <code>hyperion.image*</code> functions</td></tr><tr><td style="text-align:left;">pixelY</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Minimum Pixels at the y-axis of the image to draw on with <code>hyperion.image*</code> functions</td></tr></tbody></table><h3 id="hyperion-imagecrotate" tabindex="-1"><a class="header-anchor" href="#hyperion-imagecrotate"><span>hyperion.imageCRotate()</span></a></h3><p>Rotates the coordinate system at the center which is 0 at the x-axis and 0 at the y-axis by the given angle clockwise. Note: If you want to move the center of the coordinate system you could use hyperion.imageCOffset(). <strong>The rotation is kept until the effect ends</strong>. <br><code>hyperion.imageCRotate(angle)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">angle</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Angle of the rotation between <code>0</code> and <code>360</code>, clockwise</td></tr></tbody></table><h3 id="hyperion-imagecoffset" tabindex="-1"><a class="header-anchor" href="#hyperion-imagecoffset"><span>hyperion.imageCOffset()</span></a></h3><p>Add offset to the coordinate system at the x-axis and y-axis.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Changes at the coordinate system results in weird behavior of some shorter versions of other hyperion.image* drawing functions</p></div><p><code>hyperion.imageCOffset(offsetX, offsetY)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">offsetX</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Offset which is added to the coordinate system at the x-axis. Positive value moves to the right, negative to the left</td></tr><tr><td style="text-align:left;">offsetY</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Offset which is added to the coordinate system at the y-axis. Positive value moves to the right, negative to the left</td></tr></tbody></table><h3 id="hyperion-imagecshear" tabindex="-1"><a class="header-anchor" href="#hyperion-imagecshear"><span>hyperion.imageCShear()</span></a></h3>',14),K={href:"https://en.wikipedia.org/wiki/Shear_mapping",target:"_blank",rel:"noopener noreferrer"},j=a('<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Changes at the coordinate system results in weird behavior of some shorter versions of other hyperion.image* drawing functions</p></div><p><code>hyperion.imageCShear(sh, sv)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">sh</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Horizontal pixels to shear</td></tr><tr><td style="text-align:left;">sv</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Vertical pixels to shear.</td></tr></tbody></table><h3 id="hyperion-imageconicalgradient" tabindex="-1"><a class="header-anchor" href="#hyperion-imageconicalgradient"><span>hyperion.imageConicalGradient()</span></a></h3>',4),Z={href:"https://doc.qt.io/qt-5/qconicalgradient.html#details",target:"_blank",rel:"noopener noreferrer"},$=t("br",null,null,-1),tt=t("code",null,"hyperion.imageConicalGradient(startX, startY, width, height, centerX, centerY, angle, bytearray)",-1),et=a('<table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">startX</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Defines the start point at the x-axis of the rectangle that contains the gradient</td></tr><tr><td style="text-align:left;">startY</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Defines the start point at the y-axis of the rectangle that contains the gradient</td></tr><tr><td style="text-align:left;">width</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Defines the width of the rectangle</td></tr><tr><td style="text-align:left;">height</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Defines the height of the rectangle</td></tr><tr><td style="text-align:left;">centerX</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Defines the center of the gradient at the x-axis. For the center of the picture use <code>hyperion.imageWidth()*0.5</code>, don&#39;t forget to surround it with int() or round()</td></tr><tr><td style="text-align:left;">centerY</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Defines the center of the gradient at the y-axis. For the center of the picture use <code>hyperion.imageHeight()*0.5</code>, don&#39;t forget to surround it with int() or round()</td></tr><tr><td style="text-align:left;">angle</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Defines the angle from <code>0</code> to <code>360</code>. Used to rotate the gradient at the center point.</td></tr><tr><td style="text-align:left;">bytearray</td><td style="text-align:left;">ByteArray</td><td style="text-align:left;">bytearray of (position,red,green,blue,alpha,position,red,green,blue,alpha,...). Could be repeated as often you need it, all values have ranges from 0 to 255. The position is a point where the red green blue values are assigned. <br> <strong>Example:</strong> <code>bytearray([0,255,0,0,255,255,0,255,0,255])</code> - this is a gradient which starts at 0 with color 255,0,0 and alpha 255 and ends at position 255 with color 0,255,0 and alpha 255. The colors in between are interpolation, so this example is a color shift from red to green from 0° to 360°.</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Shorter versions of hyperion.imageConicalGradient()</p><p><code>hyperion.imageConicalGradient(centerX, centerY, angle, bytearray)</code> -&gt; startX and startY are 0 and the width/height is max. -&gt; Entire image</p></div><h3 id="hyperion-imageradialgradient" tabindex="-1"><a class="header-anchor" href="#hyperion-imageradialgradient"><span>hyperion.imageRadialGradient()</span></a></h3>',3),lt={href:"https://doc.qt.io/qt-5/qradialgradient.html#details",target:"_blank",rel:"noopener noreferrer"},it=t("br",null,null,-1),at=t("code",null,"hyperion.imageRadialGradient(startX, startY, width, height, centerX, centerY, radius, focalX, focalY, focalRadius, bytearray, spread)",-1),nt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Argument"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Comment")])],-1),ot=t("tr",null,[t("td",{style:{"text-align":"left"}},"startX"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"start point at the x-axis of the rectangle which contains the gradient.")],-1),rt=t("tr",null,[t("td",{style:{"text-align":"left"}},"startY"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"start point at the y-axis of the rectangle which contains the gradient.")],-1),dt=t("tr",null,[t("td",{style:{"text-align":"left"}},"width"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"width of the rectangle.")],-1),st=t("tr",null,[t("td",{style:{"text-align":"left"}},"height"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"height of the rectangle.")],-1),ht=t("tr",null,[t("td",{style:{"text-align":"left"}},"centerX"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},[e("Defines the center at the x-axis of the gradient. For the center of the picture use "),t("code",null,"hyperion.imageWidth()*0.5"),e(", don't forget to surround it with int() or round()")])],-1),gt=t("tr",null,[t("td",{style:{"text-align":"left"}},"centerY"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},[e("Defines the center at the y-axis of the gradient. For the center of the picture use "),t("code",null,"hyperion.imageHeight()*0.5"),e(", don't forget to surround it with int() or round()")])],-1),ct=t("tr",null,[t("td",{style:{"text-align":"left"}},"radius"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"Defines the radius of the gradient in pixels")],-1),yt=t("tr",null,[t("td",{style:{"text-align":"left"}},"focalX"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"Defines the focal point at the x-axis")],-1),ft=t("tr",null,[t("td",{style:{"text-align":"left"}},"focalY"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"Defines the focal point at the y-axis")],-1),pt=t("tr",null,[t("td",{style:{"text-align":"left"}},"focalRadius"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"Defines the radius of the focal point")],-1),xt=t("tr",null,[t("td",{style:{"text-align":"left"}},"bytearray"),t("td",{style:{"text-align":"left"}},"ByteArray"),t("td",{style:{"text-align":"left"}},[e("bytearray of (position,red,green,blue,position,red,green,blue,...). Could be repeated as often you need it, all values have ranges from 0 to 255. The position is a point where the red green blue values are assigned "),t("br"),e(),t("strong",null,"Example:"),e(),t("code",null,"bytearray([0,255,0,0,255,0,255,0])"),e(" - this is a gradient which starts at 0 with color 255,0,0 and ends at position 255 with color 0,255,0. The colors in between are interpolation, so this example is a color shift from red to green.")])],-1),mt=t("td",{style:{"text-align":"left"}},"spread",-1),ut=t("td",{style:{"text-align":"left"}},"Integer",-1),_t={style:{"text-align":"left"}},bt=t("br",null,null,-1),wt=t("code",null,"0",-1),vt=t("br",null,null,-1),It=t("code",null,"1",-1),Dt=t("br",null,null,-1),At=t("code",null,"2",-1),St=t("br",null,null,-1),Rt=t("em",null,"inside",-1),Ct={href:"https://doc.qt.io/qt-5/qradialgradient.html#details",target:"_blank",rel:"noopener noreferrer"},Yt=a('<div class="custom-container tip"><p class="custom-container-title">Shorter versions of hyperion.imageRadialGradient()</p><ul><li><code>hyperion.imageRadialGradient(startX, startY, width, height, centerX, centerY, radius, bytearray, spread)</code> -&gt; focalX, focalY, focalRadius get their values from centerX, centerY and radius</li><li><code>hyperion.imageRadialGradient(centerX, centerY, radius, focalX, focalY, focalRadius, bytearray, spread)</code> -&gt; startX and startY are 0</li><li><code>hyperion.imageRadialGradient(centerX, centerY, radius, bytearray, spread)</code> -&gt; startX and startY are 0 &amp; focalX, focalY, focalRadius get their values from centerX, centerY and radius</li></ul></div><h3 id="hyperion-imagelineargradient" tabindex="-1"><a class="header-anchor" href="#hyperion-imagelineargradient"><span>hyperion.imageLinearGradient()</span></a></h3>',2),Xt={href:"https://doc.qt.io/qt-5/qlineargradient.html#details",target:"_blank",rel:"noopener noreferrer"},Pt=t("br",null,null,-1),kt=t("code",null,"hyperion.imageLinearGradient(startRX, startRY, width, height, startX, startY, endX, endY, bytearray, spread)",-1),Tt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Argument"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Comment")])],-1),Gt=t("tr",null,[t("td",{style:{"text-align":"left"}},"startRX"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"start point at the x-axis of the rectangle which contains the gradient.")],-1),qt=t("tr",null,[t("td",{style:{"text-align":"left"}},"startRY"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"start point at the y-axis of the rectangle which contains the gradient.")],-1),Et=t("tr",null,[t("td",{style:{"text-align":"left"}},"width"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"width of the rectangle.")],-1),Lt=t("tr",null,[t("td",{style:{"text-align":"left"}},"height"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"height of the rectangle.")],-1),Ht=t("tr",null,[t("td",{style:{"text-align":"left"}},"startX"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"Defines the start at the x-axis for the gradient.")],-1),Ot=t("tr",null,[t("td",{style:{"text-align":"left"}},"startY"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"Defines the start at the y-axis for the gradient.")],-1),Bt=t("tr",null,[t("td",{style:{"text-align":"left"}},"endX"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"Defines the end at the x-axis for the gradient.")],-1),Wt=t("tr",null,[t("td",{style:{"text-align":"left"}},"endY"),t("td",{style:{"text-align":"left"}},"Integer"),t("td",{style:{"text-align":"left"}},"Defines the end at the y-axis for the gradient.")],-1),Ft=t("tr",null,[t("td",{style:{"text-align":"left"}},"bytearray"),t("td",{style:{"text-align":"left"}},"ByteArray"),t("td",{style:{"text-align":"left"}},[e("bytearray of (position,red,green,blue,alpha,position,red,green,blue,alpha,...). Could be repeated as often you need it, all values have ranges from 0 to 255. The position is a point where the red green blue values are assigned. "),t("br"),e(),t("strong",null,"Example:"),e(),t("code",null,"bytearray([0,255,0,0,255,255,0,255,0,127])"),e(" this is a gradient which starts at 0 with color 255,0,0 and alpha 255 and ends at position 255 with color 0,255,0 and alpha 127. The colors in between are interpolation, so this example is a color shift from red to green.")])],-1),zt=t("td",{style:{"text-align":"left"}},"spread",-1),Nt=t("td",{style:{"text-align":"left"}},"Integer",-1),Mt={style:{"text-align":"left"}},Vt=t("br",null,null,-1),Qt=t("code",null,"0",-1),Ut=t("br",null,null,-1),Jt=t("code",null,"1",-1),Kt=t("br",null,null,-1),jt=t("code",null,"2",-1),Zt=t("br",null,null,-1),$t=t("em",null,"inside",-1),te={href:"https://doc.qt.io/qt-5/qlineargradient.html#details",target:"_blank",rel:"noopener noreferrer"},ee=a('<div class="custom-container tip"><p class="custom-container-title">Shorter versions of hyperion.imageLinearGradient()</p><p><code>hyperion.imageLinearGradient(startX, startY, endX, endY, bytearray, spread)</code> -&gt; The rectangle which contains the gradient defaults to the full image</p></div><h3 id="hyperion-imagedrawline" tabindex="-1"><a class="header-anchor" href="#hyperion-imagedrawline"><span>hyperion.imageDrawLine()</span></a></h3><p>Draws a line at the image. All arguments are required, exception a for alpha. Add the arguments in the order of rows below. <br><code>hyperion.imageDrawLine(startX, startY, endX, endY, thick, r, g, b, a)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">startX</td><td style="text-align:left;">Integer</td><td style="text-align:left;">start point at the x-axis. Relates to <code>hyperion.imageWidth()</code></td></tr><tr><td style="text-align:left;">startY</td><td style="text-align:left;">Integer</td><td style="text-align:left;">start point at the y-axis. Relates to <code>hyperion.imageHeight()</code></td></tr><tr><td style="text-align:left;">endX</td><td style="text-align:left;">Integer</td><td style="text-align:left;">end point at the x-axis. Relates to <code>hyperion.imageWidth()</code></td></tr><tr><td style="text-align:left;">endY</td><td style="text-align:left;">Integer</td><td style="text-align:left;">end point at the y-axis. Relates to <code>hyperion.imageHeight()</code></td></tr><tr><td style="text-align:left;">thick</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Thickness of the line, should be calculated based on image height or width. But at least one Pixel. Example: <code>max(int(0.1*hyperion.imageHeight(),1)</code> is 10% of the image height.</td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">Integer</td><td style="text-align:left;">red color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">Integer</td><td style="text-align:left;">green color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">Integer</td><td style="text-align:left;">blue color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">Integer</td><td style="text-align:left;"><strong>Optional</strong> alpha of the color from <code>0</code> to <code>255</code>, if not provided, it&#39;s <code>255</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Shorter versions of hyperion.imageLinearGradient()</p><p><code>hyperion.imageLinearGradient(startX, startY, endX, endY, bytearray, spread)</code> -&gt; The rectangle which contains the gradient defaults to the full image</p></div><h3 id="hyperion-imagedrawpoint" tabindex="-1"><a class="header-anchor" href="#hyperion-imagedrawpoint"><span>hyperion.imageDrawPoint()</span></a></h3><p>Draws a point/dot at the image. All arguments are required, exception a for alpha. Add the arguments in the order of rows below. <br><code>hyperion.imageDrawPoint(x, y, thick, r, g, b, a)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">x</td><td style="text-align:left;">Integer</td><td style="text-align:left;">point position at the x-axis. Relates to <code>hyperion.imageWidth()</code></td></tr><tr><td style="text-align:left;">y</td><td style="text-align:left;">Integer</td><td style="text-align:left;">point position at the y-axis. Relates to <code>hyperion.imageHeight()</code></td></tr><tr><td style="text-align:left;">thick</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Thickness of the point in pixel, should be calculated based on image height or width. But at least one Pixel. Example: <code>max(int(0.1*hyperion.imageHeight(),1)</code> is 10% of the image height.</td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">Integer</td><td style="text-align:left;">red color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">Integer</td><td style="text-align:left;">green color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">Integer</td><td style="text-align:left;">blue color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">Integer</td><td style="text-align:left;"><strong>Optional</strong> alpha of the color from <code>0</code> to <code>255</code>, if not provided, it&#39;s <code>255</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Shorter versions of hyperion.imageDrawPoint()</p><p><code>hyperion.imageDrawPoint(x, y, thick, r, g, b)</code> -&gt; alpha defaults to 255</p></div><h3 id="hyperion-imagedrawpolygon" tabindex="-1"><a class="header-anchor" href="#hyperion-imagedrawpolygon"><span>hyperion.imageDrawPolygon()</span></a></h3><p>Draws a polygon at the image and fills it with the specific color. Used for free forming (triangle, hexagon,... whatever you want ). All arguments are required, exception a for alpha. Add the arguments in the order of rows below. <br><code>hyperion.imageDrawPolygon(bytearray, r, g, b, a)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">bytearray</td><td style="text-align:left;">ByteArray</td><td style="text-align:left;">bytearray([point1X,point1Y,point2X,point2Y,point3X,point3Y,...]). Add pairs of X/Y coordinates to specific the corners of the polygon, each point has a X and a Y coordinate, you could add as much points as you need. The last point automatically connects to the first point.</td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">Integer</td><td style="text-align:left;">red color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">Integer</td><td style="text-align:left;">green color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">Integer</td><td style="text-align:left;">blue color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">Integer</td><td style="text-align:left;"><strong>Optional</strong> alpha of the color from <code>0</code> to <code>255</code>, if not provided, it&#39;s <code>255</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Shorter versions of hyperion.imageDrawPolygon()</p><p><code>hyperion.imageDrawPolygon(bytearray, r, g, b)</code> -&gt; alpha defaults to 255</p></div><h3 id="hyperion-imagedrawpie" tabindex="-1"><a class="header-anchor" href="#hyperion-imagedrawpie"><span>hyperion.imageDrawPie()</span></a></h3><p>Draws a pie (also known from pie charts) at the image and fills it with the specific color. All arguments are required, exception a for alpha. Add the arguments in the order of rows below. <br><code>hyperion.imageDrawPie(centerX, centerY, radius, startAngle, spanAngle, r, g, b, a)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">centerX</td><td style="text-align:left;">Integer</td><td style="text-align:left;">The center of the Pie at the x-axis</td></tr><tr><td style="text-align:left;">centerY</td><td style="text-align:left;">Integer</td><td style="text-align:left;">The center of the Pie at the y-axis</td></tr><tr><td style="text-align:left;">radius</td><td style="text-align:left;">Integer</td><td style="text-align:left;">radius of the Pie in Pixels</td></tr><tr><td style="text-align:left;">startAngle</td><td style="text-align:left;">Integer</td><td style="text-align:left;">start angle from <code>0</code> to <code>360</code>. <code>0</code> is at 3 o&#39;clock</td></tr><tr><td style="text-align:left;">spanAngle</td><td style="text-align:left;">Integer</td><td style="text-align:left;">span (wide) of the pie from <code>-360</code> to <code>360</code> which starts at the startAngle, positive values are counter-clockwise, negative clockwise</td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">Integer</td><td style="text-align:left;">red color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">Integer</td><td style="text-align:left;">green color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">Integer</td><td style="text-align:left;">blue color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">Integer</td><td style="text-align:left;"><strong>Optional</strong> alpha of the color from <code>0</code> to <code>255</code>, if not provided, it&#39;s <code>255</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Shorter versions of hyperion.imageDrawPie()</p><p><code>hyperion.imageDrawPie(centerX, centerY, radius, startAngle, spanAngle, r, g, b)</code> -&gt; alpha defaults to 255</p></div><h3 id="hyperion-imagedrawrect" tabindex="-1"><a class="header-anchor" href="#hyperion-imagedrawrect"><span>hyperion.imageDrawRect()</span></a></h3><p>Draws a rectangle on the image. All arguments are required, exception a for alpha. Add the arguments in the order of rows below. <br><code>hyperion.imageDrawRect(startX, startY, width, height, thick, r, g, b, a,)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">startX</td><td style="text-align:left;">Integer</td><td style="text-align:left;">start point at the x-axis. Relates to <code>hyperion.imageWidth()</code></td></tr><tr><td style="text-align:left;">startY</td><td style="text-align:left;">Integer</td><td style="text-align:left;">start point at the y-axis. Relates to <code>hyperion.imageHeight()</code></td></tr><tr><td style="text-align:left;">width</td><td style="text-align:left;">Integer</td><td style="text-align:left;">width of the rectangle. Relates to <code>hyperion.imageWidth()</code></td></tr><tr><td style="text-align:left;">height</td><td style="text-align:left;">Integer</td><td style="text-align:left;">height of the rectangle. Relates to <code>hyperion.imageHeight()</code></td></tr><tr><td style="text-align:left;">thick</td><td style="text-align:left;">Integer</td><td style="text-align:left;">Thickness of the rectangle, a good start value is <code>1</code></td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">Integer</td><td style="text-align:left;">define red color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">Integer</td><td style="text-align:left;">define green color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">Integer</td><td style="text-align:left;">define blue color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">Integer</td><td style="text-align:left;"><strong>Optional</strong> alpha of the color from <code>0</code> to <code>255</code>, if not provided, it&#39;s <code>255</code></td></tr></tbody></table><h3 id="hyperion-imagesolidfill" tabindex="-1"><a class="header-anchor" href="#hyperion-imagesolidfill"><span>hyperion.imageSolidFill()</span></a></h3><p>Fill a specific part of the image with a solid color (or entire). All arguments are required. Add the arguments in the order of rows below. <br><code>hyperion.imageSolidFill(startX, startY, width, height, r, g, b, a)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">startX</td><td style="text-align:left;">Integer</td><td style="text-align:left;">start point at the x-axis. Relates to <code>hyperion.imageWidth()</code></td></tr><tr><td style="text-align:left;">startY</td><td style="text-align:left;">Integer</td><td style="text-align:left;">start point at the y-axis. Relates to <code>hyperion.imageHeight()</code></td></tr><tr><td style="text-align:left;">width</td><td style="text-align:left;">Integer</td><td style="text-align:left;">width of the fill area. Relates to <code>hyperion.imageWidth()</code></td></tr><tr><td style="text-align:left;">height</td><td style="text-align:left;">Integer</td><td style="text-align:left;">height of the fill area. Relates to <code>hyperion.imageHeight()</code></td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">Integer</td><td style="text-align:left;">define red color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">Integer</td><td style="text-align:left;">define green color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">Integer</td><td style="text-align:left;">define blue color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">a</td><td style="text-align:left;">Integer</td><td style="text-align:left;">alpha of the color from <code>0</code> to <code>255</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">Shorter versions of hyperion.imageSolidFill()</p><ul><li><code>hyperion.imageSolidFill(startX, startY, width, height, r, g, b)</code> -&gt; no alpha, defaults to 255</li><li><code>hyperion.imageSolidFill(r, g, b, a)</code> -&gt; startX and startY is 0, width and height is max. -&gt; full image</li><li><code>hyperion.imageSolidFill(r, g, b)</code> -&gt; startX and startY is 0, width and height is max, alpha 255. -&gt; full image</li></ul></div><h3 id="hyperion-imagesetpixel" tabindex="-1"><a class="header-anchor" href="#hyperion-imagesetpixel"><span>hyperion.imageSetPixel()</span></a></h3><p>Assign a color to a specific pixel position. All arguments are required. Add the arguments in the order of rows below. <br><code>hyperion.imageSetPixel(X, Y, r, g, b)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">X</td><td style="text-align:left;">Integer</td><td style="text-align:left;">pixel point at the x-axis. Relates to <code>hyperion.imageWidth()</code></td></tr><tr><td style="text-align:left;">Y</td><td style="text-align:left;">Integer</td><td style="text-align:left;">pixel point at the y-axis. Relates to <code>hyperion.imageHeight()</code></td></tr><tr><td style="text-align:left;">r</td><td style="text-align:left;">Integer</td><td style="text-align:left;">define red color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">g</td><td style="text-align:left;">Integer</td><td style="text-align:left;">define green color from <code>0</code> to <code>255</code></td></tr><tr><td style="text-align:left;">b</td><td style="text-align:left;">Integer</td><td style="text-align:left;">define blue color from <code>0</code> to <code>255</code></td></tr></tbody></table><h3 id="hyperion-imagegetpixel" tabindex="-1"><a class="header-anchor" href="#hyperion-imagegetpixel"><span>hyperion.imageGetPixel()</span></a></h3><p>Get a color of a specific pixel position. All arguments are required. Add the arguments in the order of rows below. <br><code>hyperion.imageGetPixel(X, Y)</code></p><table><thead><tr><th style="text-align:left;">Argument</th><th style="text-align:left;">Type</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">X</td><td style="text-align:left;">Integer</td><td style="text-align:left;">pixel point at the x-axis. Relates to <code>hyperion.imageWidth()</code></td></tr><tr><td style="text-align:left;">Y</td><td style="text-align:left;">Integer</td><td style="text-align:left;">pixel point at the y-axis. Relates to <code>hyperion.imageHeight()</code></td></tr><tr><td style="text-align:left;">Return</td><td style="text-align:left;">Tuple</td><td style="text-align:left;">Returns a Python Tuple of RGB values</td></tr></tbody></table><h3 id="hyperion-setcolor" tabindex="-1"><a class="header-anchor" href="#hyperion-setcolor"><span>hyperion.setColor()</span></a></h3><p>Set a single color to all LEDs by adding <code>hyperion.setColor(255,0,0)</code>, all LEDs will be red. But it is also possible to send a bytearray of RGB values. Each RGB value in this bytearray represents one LED.</p><ul><li><strong>Example 1:</strong> <code>hyperion.setColor(bytearray([255,0,0]))</code> The first LED will be red</li><li><strong>Example 2:</strong> <code>hyperion.setColor(bytearray([255,0,0,0,255,0]))</code> The first LED will be red, the second is green</li><li><strong>Example 3:</strong> <code>hyperion.setColor(bytearray([255,0,0,0,255,0,255,255,255]))</code> The first LED will be red, the second is green, the third is white</li><li>You usually assign to all LEDs a color, therefore you need to know how much LEDs the user currently have. Get it with <code>hyperion.ledCount</code></li></ul><div class="custom-container warning"><p class="custom-container-title">hyperion.setColor()</p><ul><li>hyperion.setColor() function is not recommended to assign LED colors, it doesn&#39;t work together with <strong><code>hyperion.image*</code></strong> functions</li><li>You don&#39;t know where is top/left/right/bottom and it doesn&#39;t work with matrix layouts!</li><li>Please consider to use the <strong><code>hyperion.image*</code></strong> functions instead to create amazing effects that scales with the user setup</li></ul></div>',34);function le(ie,ae){const l=o("ExternalLinkIcon");return r(),d("div",null,[h,g,c,t("table",null,[y,t("tbody",null,[f,p,t("tr",null,[x,m,t("td",u,[e("Get the current image width, calculate positions for elements at the "),t("a",_,[e("coordinate system"),i(l)])])]),t("tr",null,[b,w,t("td",v,[e("Get the current image height,calculate positions for elements at the "),t("a",I,[e("coordinate system"),i(l)])])]),D,A,S,R,C,Y,X,P,k,T,G,q,E,L,H,O,B,t("tr",null,[W,F,t("td",z,[e("A "),t("a",N,[e("Python tuple"),i(l)]),e(" RGB values for the requested position. See "),M])]),V,Q,U])]),J,t("p",null,[e("Shears the coordinate system at the vertical and horizontal. More info to shearing here: "),t("a",K,[e("Shear Mapping"),i(l)])]),j,t("p",null,[e("Draws a conical gradient on the image, all arguments are required. Add the arguments in the order of rows below. Short explanation for conical gradient at the QT docs: "),t("a",Z,[e("Conical Gradient"),i(l)]),e(),$,tt]),et,t("p",null,[e("Draws a radial gradient on the image. Add the arguments in the order of rows below. All arguments are required. Short description at QT Docs: "),t("a",lt,[e("Radial Gradient"),i(l)]),e(),it,at]),t("table",null,[nt,t("tbody",null,[ot,rt,dt,st,ht,gt,ct,yt,ft,pt,xt,t("tr",null,[mt,ut,t("td",_t,[e("Defines the spread method outside the gradient. Available spread modes are: "),bt,e(),wt,e(" -> The area is filled with the closest stop color "),vt,e(),It,e(" -> The gradient is reflected outside the gradient area "),Dt,e(),At,e(" -> The gradient is repeated outside the gradient area "),St,e(" Please note that outside means "),Rt,e(" the rectangle but outside of the gradient start and end points, so if these points are the same, you don't see the spread mode. A picture to the spread modes can you find here: "),t("a",Ct,[e("Spread modes"),i(l)])])])])]),Yt,t("p",null,[e("Draws a linear gradient on the image. Add the arguments in the order of rows below. All arguments are required. Short description at QT Docs: "),t("a",Xt,[e("Linear Gradient"),i(l)]),e(),Pt,kt]),t("table",null,[Tt,t("tbody",null,[Gt,qt,Et,Lt,Ht,Ot,Bt,Wt,Ft,t("tr",null,[zt,Nt,t("td",Mt,[e("Defines the spread method outside the gradient. Available spread modes are: "),Vt,e(),Qt,e(" -> The area is filled with the closest stop color "),Ut,e(),Jt,e(" -> The gradient is reflected outside the gradient area "),Kt,e(),jt,e(" -> The gradient is repeated outside the gradient area "),Zt,e(" Please note that outside means "),$t,e(" the rectangle but outside of the gradient start and end points, so if these points are the same, you don't see the spread mode. A picture to the spread modes can you find here: "),t("a",te,[e("Spread modes"),i(l)])])])])]),ee])}const oe=n(s,[["render",le],["__file","API.html.vue"]]),re=JSON.parse('{"path":"/effects/API.html","title":"Effect Engine API","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"API Overview","slug":"api-overview","link":"#api-overview","children":[{"level":3,"title":"hyperion.imageMinSize()","slug":"hyperion-imageminsize","link":"#hyperion-imageminsize","children":[]},{"level":3,"title":"hyperion.imageCRotate()","slug":"hyperion-imagecrotate","link":"#hyperion-imagecrotate","children":[]},{"level":3,"title":"hyperion.imageCOffset()","slug":"hyperion-imagecoffset","link":"#hyperion-imagecoffset","children":[]},{"level":3,"title":"hyperion.imageCShear()","slug":"hyperion-imagecshear","link":"#hyperion-imagecshear","children":[]},{"level":3,"title":"hyperion.imageConicalGradient()","slug":"hyperion-imageconicalgradient","link":"#hyperion-imageconicalgradient","children":[]},{"level":3,"title":"hyperion.imageRadialGradient()","slug":"hyperion-imageradialgradient","link":"#hyperion-imageradialgradient","children":[]},{"level":3,"title":"hyperion.imageLinearGradient()","slug":"hyperion-imagelineargradient","link":"#hyperion-imagelineargradient","children":[]},{"level":3,"title":"hyperion.imageDrawLine()","slug":"hyperion-imagedrawline","link":"#hyperion-imagedrawline","children":[]},{"level":3,"title":"hyperion.imageDrawPoint()","slug":"hyperion-imagedrawpoint","link":"#hyperion-imagedrawpoint","children":[]},{"level":3,"title":"hyperion.imageDrawPolygon()","slug":"hyperion-imagedrawpolygon","link":"#hyperion-imagedrawpolygon","children":[]},{"level":3,"title":"hyperion.imageDrawPie()","slug":"hyperion-imagedrawpie","link":"#hyperion-imagedrawpie","children":[]},{"level":3,"title":"hyperion.imageDrawRect()","slug":"hyperion-imagedrawrect","link":"#hyperion-imagedrawrect","children":[]},{"level":3,"title":"hyperion.imageSolidFill()","slug":"hyperion-imagesolidfill","link":"#hyperion-imagesolidfill","children":[]},{"level":3,"title":"hyperion.imageSetPixel()","slug":"hyperion-imagesetpixel","link":"#hyperion-imagesetpixel","children":[]},{"level":3,"title":"hyperion.imageGetPixel()","slug":"hyperion-imagegetpixel","link":"#hyperion-imagegetpixel","children":[]},{"level":3,"title":"hyperion.setColor()","slug":"hyperion-setcolor","link":"#hyperion-setcolor","children":[]}]}],"git":{"updatedTime":1710449524000},"filePathRelative":"effects/API.md"}');export{oe as comp,re as data};
